// Code generated by command: go run asm.go -out checksum_amd64.s -stubs checksum_amd64.go. DO NOT EDIT.

//go:build amd64

#include "textflag.h"

// func checksum(data []byte) (sum uint16)
TEXT Â·checksum(SB), NOSPLIT, $0-26
	// initialize registers
	XORQ  AX, AX
	XORQ  CX, CX
	XORQ  CX, CX
	XORQ  DX, DX
	XORQ  BX, BX
	XORQ  SI, SI
	XORL  CX, CX
	MOVQ  data_base+0(FP), CX
	MOVQ  data_len+8(FP), SI
	TESTQ SI, SI
	JZ    early_fail

loop:
	TESTQ SI, SI
	JZ    fin
	CMPQ  SI, $0x02
	JL    handle_odd
	MOVB  (CX), DL
	SHLW  $0x08, DX
	MOVB  1(CX), BL
	ORW   BX, DX
	ADDQ  DX, AX
	CMPL  AX, $0x0000ffff
	JA    adjust_sum

nextb:
	ADDQ $0x02, CX
	SUBQ $0x02, SI
	JNC  loop

fin:
	CMPQ AX, $0x0000ffff
	JA   adjust_sum
	NOTW AX
	MOVW AX, sum+24(FP)
	RET

early_fail:
	XORW AX, AX
	MOVW $0x0000, AX
	MOVW AX, sum+24(FP)
	RET

handle_odd:
	CMPQ SI, $0x01
	JNE  fin
	MOVB (CX), DL
	SHLW $0x08, DX
	ADDQ DX, AX
	CMPQ AX, $0x0000ffff
	JA   adjust_sum

adjust_sum:
	XORQ DI, DI
	MOVQ AX, DI
	ANDQ $0x0000ffff, AX
	SHRQ $0x10, DI
	ADDQ DI, AX
	JMP  nextb
